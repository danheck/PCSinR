% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pcs_seqential.R
\name{pcs_sequential}
\alias{pcs_sequential}
\title{PCS-DM Sequential Cue Search for Multiattribute Decisions}
\usage{
pcs_sequential(c1, c2, v, t1, t2, restart = FALSE, bottomup = TRUE,
  p = 1.9, decay = 0.1, maxiter = 1000, stability = 10^-6,
  convergence = "floor", lambda = 2.9)
}
\arguments{
\item{c1}{positive/negative/hidden/non-available cue values for Option 1 (+/-1 for positive/negative cue values; 0 for hidden cue values; \code{NA} for nonavailable information)}

\item{c2}{positive/negative/hidden/non-available cue values for Option 2}

\item{v}{vector of cue valdities defined as the probability that cue leads to correct decision if it discriminates between the the options (v=.5 for nonvalid cues)}

\item{t1}{true cue values for Option 1 (relevant for hidden cues that are opened sequentially)}

\item{t2}{true cue values for Option 2}

\item{restart}{whether to reset the activation of the nodes to zero after novel information becomes (new cue values) available}

\item{bottomup}{whether to add unidirectional links from the option nodes to the hidden cue-value nodes (i.e., whether the attention to the options directly affects the attention on hidden cue values)}

\item{p}{sensitivity parameter determining weighting of cue validities (see \link{validity_weight})}

\item{decay}{decay parameter}

\item{maxiter}{maximum number of iterations}

\item{stability}{stability criterion that determines convergence(i.e., when to stop iterating)}

\item{convergence}{convergence criterion that evaluates the network's energy of the last 10 iterations. One of \code{"floor"} (identical floor of energy/stability for the current vs. remaining 9 nodes), \code{"sum"} (sum of absolute consecutive energy differences), or \code{"max"} (maximum of the absolute differences between the current and remaining 9 nodes)}

\item{lambda}{parameter used for Luce's choice rule (\link{luce_choice})}
}
\description{
Starts with a partially known cue matrix and searches missing cue values sequentially until all cues are known.
}
\examples{
###### each step starts with the most recent activation levels
seq <- pcs_sequential(c1=c(1,0,0), c2=c(0,NA,1),
                      t1=c(1,-1,-1), t2=c(-1,NA,1),
                      v=c(.8,.7,.6), restart=FALSE)
sapply(seq, function(ss) ss[1:5])

###### each step resets the activation pattern to zero
seq2 <- pcs_sequential(c1=c(1,0,0), c2=c(0,NA,1),
                       t1=c(1,-1,-1), t2=c(-1,NA,1),
                       v=c(.8,.7,.6), restart=TRUE)
sapply(seq2, function(ss) ss[1:5])
}

